set shell=/bin/zsh

let s:vim_dir = expand('<sfile>:h')
function! s:LocalSource(filename) abort
    exec 'source ' . s:vim_dir . '/' . a:filename
endfunction

call s:LocalSource('vimrc.plugins')
""""""""""""""""""""""""""""""""""" GENERAL """"""""""""""""""""""""""""""""""""

if has('nvim')
    au TermOpen * setlocal nonumber norelativenumber
endif

let mapleader=" "
set nocompatible

set background=dark         " dark background

filetype plugin indent on   " autodetect file type
set syntax=on               " syntax highlighting
scriptencoding utf-8
set encoding=utf-8
set termencoding=utf-8
set t_ut=
set ttyfast

if !has("nvim")
    set ttyscroll=10
endif

if has('clipboard')
    if has('unnamedplus')   " When possible use + register for copy-paste
        set clipboard=unnamed,unnamedplus
    else                    " On mac and Windows, use * register for copy-paste
        set clipboard=unnamed
    endif
endif

set ruler                   " Show the ruler
set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
set showcmd                 " Show partial commands in status line and

set mouse=""                " disable mouse
set noswapfile              " disable swap files
set nobackup
set hidden                  " Allow buffer switching without saving
set history=1000
set number
set relativenumber
set virtualedit=block

set backupdir=/tmp/nvim/backup

" For when you forget to sudo.. Really Write the file.
cmap w!! w !sudo tee % >/dev/null

" Shortcuts
" Change Working Directory to that of the current file
cmap cwd lcd %:p:h
cmap cd. lcd %:p:h

noremap <leader>hl :nohl<CR>
noremap <leader>nl :set invnumber invrelativenumber<CR>
noremap <leader>j :cnext<CR>
noremap <leader>k :cprevious<CR>
noremap <C-j> :lnext<CR>
noremap <C-k> :lprevious<CR>
noremap Y y$

cnoreabbrev hs split %:p:h/<C-R>
cnoreabbrev hv vsplit %:p:h/<C-R>
cnoreabbrev he e %:p:h/<C-R>
if has('nvim')
    cnoreabbrev vt vsplit \| terminal
    cnoreabbrev st split \| terminal
else
    cnoreabbrev vt vertical terminal
    cnoreabbrev st terminal
endif

autocmd FileType yaml,python setlocal cursorcolumn " draw cursorcolumn for python and yaml

let &undodir=s:vim_dir . '/.vimdid/'
set undofile

"""""""""""""""""""""""""""""""""" APPERENCE """""""""""""""""""""""""""""""""""

colorscheme atlas

set tabpagemax=15               " Only show 15 tabs
set showmode                    " Display the current mode

set cursorline                  " Highlight current line

highlight clear SignColumn      " SignColumn should match background
highlight clear LineNr          " Current line number row will have same

autocmd FileType yaml setlocal ts=4 sts=4 sw=4 expandtab

set laststatus=3                " always display statusline
set statusline=%<%n\ %F\ %m\ %r\ %y\ 0x%B,%b%=%l:%c\ %P

set backspace=indent,eol,start  " Backspace for dummies
set linespace=0                 " No extra spaces between rows
set showmatch                   " Show matching brackets/parenthesis
set incsearch                   " Find as you type search
set hlsearch                    " Highlight search terms
set winminheight=0              " Windows can be 0 line high
set ignorecase                  " Case insensitive search
set smartcase                   " Case sensitive when uc present
set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then
                                " longest common part, then all.
set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
set scrolljump=5                " Lines to scroll when cursor leaves screen
set scrolloff=3                 " Minimum lines to keep above and below cursor
set colorcolumn=81              " higlight column 81
set list!
set listchars=tab:·\ ,trail:.   " Highlight problematic whitespace
set fillchars+=vert:│           " separator
set fillchars+=stl:\ ,stlnc:\   "
set vb t_vb=                    " No more beeps
set lazyredraw
set noshowmode
set noerrorbells

"""""""""""""""""""""""""""""""""" FORMATTING """"""""""""""""""""""""""""""""""

set autoindent                  " Indent at the same level of the previous line
set expandtab                   " Tabs are spaces, not tabs
set shiftwidth=2                " Use indents of 2 spaces
set tabstop=2                   " An indentation every four columns
set softtabstop=2               " Let backspace delete indent
set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
set splitright                  " Puts new vsplit windows to the right of the current
set splitbelow                  " Puts new split windows to the bottom of the current

""""""""""""""""""""""""""""""""" KEY MAPPING """"""""""""""""""""""""""""""""""

autocmd InsertLeave  * normal mZ
nmap <leader>i `Z

nmap j gj
nmap k gk

" nvim terminal more like vim terminal
if has('nvim')
    tnoremap <C-w>N <C-\><C-n>
    tnoremap <C-w>h <C-\><C-N><C-w>h
    tnoremap <C-W>j <C-\><C-N><C-w>j
    tnoremap <C-w>k <C-\><C-N><C-w>k
    tnoremap <C-w>l <C-\><C-N><C-w>l
endif

""""""""""""""""""""""""""""""""""" vim-go """""""""""""""""""""""""""""""""""""

let g:go_highlight_functions = 1
let g:go_highlight_methods = 0
let g:go_highlight_fields = 0
let g:go_highlight_types = 0
let g:go_highlight_operators = 0
let g:go_highlight_build_constraints = 1
let g:go_fmt_command = "goimports"
let g:go_def_mapping_enabled = 1

let g:go_term_enabled = 1
let g:go_term_close_on_exit = 0


"""""""""""""""""""""""""""""""""""" FZF """""""""""""""""""""""""""""""""""""""

let g:rooter_patterns = [
            \ '.git', 
            \ 'Makefile', 
            \ 'compile_commands.json',
            \ 'Cargo.toml',
            \ ]

if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif

if executable('fzf')

    let g:fzf_buffers_jump = 1
    let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.9 } }

    " let g:fzf_layout = { 'down': '~20%' }

    " autocmd! FileType fzf
    " autocmd  FileType fzf set laststatus=0 noshowmode noruler
      " \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

    map <C-p> :Files<CR>
    nmap <leader>; :Buffers<CR>

    if executable('rg')
        set grepprg=rg\ --no-heading\ --vimgrep
        set grepformat=%f:%l:%c:%m

        command! -bang -nargs=* Rg
          \ call fzf#vim#grep(
          \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
          \   fzf#vim#with_preview('right:50%'),
          \   <bang>0)


        function! SearchWord()
            :norm "gyiw

            call fzf#vim#grep(
                        \ 'rg --column --line-number --no-heading --color=always '.shellescape(getreg('g')), 1,
                        \ fzf#vim#with_preview('right:50%'), 0)
        endfunction

        nmap <leader>fw :call SearchWord()<cr>
    endif

endif

"""""""""""""""""""""""""""""""""" vim-wiki """"""""""""""""""""""""""""""""""""

let g:vim_markdown_folding_style_pythonic = 1
let g:vim_markdown_new_list_item_indent = 0
let g:vim_markdown_conceal_code_blocks = 0
let g:vim_markdown_fenced_languages = [
    \ 'csharp=cs',
    \ 'cpp=cpp', 
    \ 'vim=vim', 
    \ 'bash=sh', 
    \ 'go=go',
    \ 'c=c',
    \ 'python=python' ]

let g:note_dir = $HOME . '/notes'

let g:vimwiki_folding = 'custom'
let g:vimwiki_list = [{
    \ 'path': g:note_dir,
    \ 'syntax': 'markdown',
    \ 'ext': '.md',
    \ 'nested_syntaxes': {
        \ 'go': 'go',
        \ 'json': 'json',
        \ 'php': 'php',
        \ 'c': 'c',
        \ 'cpp': 'cpp'
    \ },
    \ }]

let g:vimwiki_ext2syntax = {
    \ '.md': 'markdown',
    \ '.md.gpg': 'markdown'
    \ }

nmap <leader>vd :VimwikiMakeDiaryNote<CR>
nmap <leader>vt :VimwikiMakeTomorrowDiaryNote<CR>
nmap <leader>vy :VimwikiMakeYesterdayDiaryNote<CR>

if has("gui_running") || has('nvim-0.4')
  hi def VimwikiDelText term=strikethrough cterm=strikethrough gui=strikethrough
endif

"""""""""""""""""""""""""""""""""""" lsp """""""""""""""""""""""""""""""""""""""

let g:completion_matching_strategy_list = ['exact', 'substring', 'fuzzy']
set completeopt=menuone,noinsert,noselect

""""""""""""""""""""""""""""" google/vim-codefmt """""""""""""""""""""""""""""""

Glaive codefmt clang_format_executable='clang-format-9'
Glaive codefmt rustfmt_options+='--edition=2021'

augroup autoformat_settings
  autocmd FileType bzl AutoFormatBuffer buildifier
  autocmd FileType c,cpp,proto,arduino AutoFormatBuffer clang-format
  autocmd FileType dart AutoFormatBuffer dartfmt
  autocmd FileType gn AutoFormatBuffer gn
  autocmd FileType go AutoFormatBuffer gofmt
  autocmd FileType html,css,sass,scss,less,json AutoFormatBuffer js-beautify
  autocmd FileType java AutoFormatBuffer google-java-format
  autocmd FileType python AutoFormatBuffer black
  autocmd FileType rust AutoFormatBuffer rustfmt
  autocmd FileType vue,javascript,typescriptreact AutoFormatBuffer prettier
augroup END

""""""""""""""""""""""""""""""""" terraform """"""""""""""""""""""""""""""""""""

let g:terraform_fmt_on_save=1

""""""""""""""""""""""""""""""""""" custom """""""""""""""""""""""""""""""""""""

function! StripTrailingWhitespace()
    if &ft =~ 'vimwiki'
    else
        %s/\s\+$//e
    endif
endfun

autocmd BufWritePre vim call StripTrailingWhitespace()

function YaPaste() range
  echo system('echo '.shellescape(join(getline(a:firstline, a:lastline), "\n")).'| ya paste | ya notify')
endfunction

vnoremap <silent> <leader>y :call YaPaste()<cr>

if has('nvim')
    lua require('custom')

    set nofoldenable
    set foldmethod=expr
    set foldexpr=nvim_treesitter#foldexpr()
endif

let g:ucompile_procs = 8

call s:LocalSource('term.vim')
call s:LocalSource('uservices.vim')
