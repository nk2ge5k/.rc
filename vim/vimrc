" set shell=/bin/zsh

let s:vim_dir = expand('<sfile>:h')
function! s:LocalSource(filename) abort
    exec 'source ' . s:vim_dir . '/' . a:filename
endfunction

call s:LocalSource('vimrc.plugins')
""""""""""""""""""""""""""""""""""" GENERAL """"""""""""""""""""""""""""""""""""

if has('nvim')
    au TermOpen * setlocal nonumber norelativenumber
endif

let mapleader=" "
set nocompatible

set background=dark         " dark background

set foldmethod=manual
set nobackup nowritebackup
filetype plugin indent on   " autodetect file type
set syntax=on               " syntax highlighting
scriptencoding utf-8
set encoding=utf-8
set termencoding=utf-8
set t_ut=
set ttyfast

if !has("nvim")
    set ttyscroll=10
endif

if has('clipboard')
    if has('unnamedplus')   " When possible use + register for copy-paste
        set clipboard=unnamed,unnamedplus
    else                    " On mac and Windows, use * register for copy-paste
        set clipboard=unnamed
    endif
endif

set ruler                   " Show the ruler
set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
set showcmd                 " Show partial commands in status line and

set mouse=""                " disable mouse
set noswapfile              " disable swap files
set nobackup
set hidden                  " Allow buffer switching without saving
set history=1000
set number
set relativenumber
set virtualedit=block
set autoread

set backupdir=/tmp/nvim/backup

" For when you forget to sudo.. Really Write the file.
cmap w!! w !sudo tee % >/dev/null

" Shortcuts
" Change Working Directory to that of the current file
cmap cwd lcd %:p:h
cmap cd. lcd %:p:h

noremap <leader>hl :nohl<CR>
noremap <leader>nl :set invnumber invrelativenumber<CR>
noremap <leader>j :cnext<CR>
noremap <leader>k :cprevious<CR>
noremap <C-j> :lnext<CR>
noremap <C-k> :lprevious<CR>
noremap <C-h> :tabp<CR>
noremap <C-l> :tabn<CR>
noremap Y y$
noremap <leader>s :split %:p:h/<CR>
noremap <leader>v :vsplit %:p:h/<CR>
" copy directory under cursor into 'x' register then open in the new tab,
" changign tab current directory to the same directory.
" NOTE: does not work properly if path under cursor is file
noremap <leader>p :let @x = expand('<cfile>')<CR>
      \ :execute 'tabnew' @x<CR>
      \ :execute 'tcd' @x<CR>

cnoreabbrev hs split %:p:h/<C-R>
cnoreabbrev hv vsplit %:p:h/<C-R>
cnoreabbrev he e %:p:h/<C-R>

if has('nvim')
    cnoreabbrev vt vsplit \| terminal
    cnoreabbrev st split \| terminal
else
    cnoreabbrev vt vertical terminal
    cnoreabbrev st terminal
endif

autocmd FileType yaml,python setlocal cursorcolumn " draw cursorcolumn for python and yaml
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

function BigFile()
    echo("Big file")
    if exists(':TSBufDisable')
        exec 'TSBufDisable autotag'
        exec 'TSBufDisable highlight'
        " etc...
    endif

    syntax off
    filetype off
    set noundofile
    set noswapfile
    set noloadplugins
    set nowrap
endfunction

autocmd BufReadPre * if getfsize(expand("%")) > 52428800 | exec BigFile() | endif

let &undodir=s:vim_dir . '/.vimdid/'
set undofile

"""""""""""""""""""""""""""""""""" APPERENCE """""""""""""""""""""""""""""""""""

set tabpagemax=15               " Only show 15 tabs
set showmode                    " Display the current mode

set cursorline                  " Highlight current line

highlight clear VertSplit
highlight Normal guifg=NvimLightGrey2 guibg=none

augroup comment_highlights
  autocmd!

  " TODO
  autocmd Syntax * syntax keyword TodoComment TODO
        \ containedin=.*Comment,vimCommentTitle,cCommentL
  " NOTE
  autocmd Syntax * syntax keyword NoteComment NOTE
        \ containedin=.*Comment,vimCommentTitle,cCommentL
  " FIXME
  autocmd Syntax * syntax keyword FixComment FIXME
        \ containedin=.*Comment,vimCommentTitle,cCommentL
  " @leak
  autocmd Syntax * syntax match LeakComment /@leak/
        \ containedin=.*Comment,vimCommentTitle,cCommentL
  " @question
  autocmd Syntax * syntax match QuestionComment /@question/
        \ containedin=.*Comment,vimCommentTitle,cCommentL
  " @slow
  autocmd Syntax * syntax match SlowComment /@slow/
        \ containedin=.*Comment,vimCommentTitle,cCommentL

  " @important
  autocmd Syntax * syntax match ImportantComment /@important/
        \ containedin=.*Comment,vimCommentTitle,cCommentL
  " @hack
  autocmd Syntax * syntax match HackComment /@hack/
        \ containedin=.*Comment,vimCommentTitle,cCommentL

  " @nocheckin
  autocmd Syntax * syntax match NoCheckIn /@nocheckin/
        \ containedin=.*Comment,vimCommentTitle,cCommentL

  " @unused
  autocmd Syntax * syntax match UnusedComment /@unused/
        \ containedin=.*Comment,vimCommentTitle,cCommentL

  highlight TodoComment
        \ cterm=bold gui=bold
  highlight NoteComment
        \ ctermbg=none ctermfg=11 guifg=#FDDA0D guibg=none
  highlight FixComment
        \ ctermbg=none ctermfg=9 guifg=#FF2400 guibg=none
  highlight LeakComment
        \ ctermbg=none ctermfg=9 guifg=#EE9F27 guibg=none
  highlight QuestionComment
        \ cterm=bold gui=bold
  highlight SlowComment
        \ ctermbg=none ctermfg=9 guifg=#FF2400 guibg=none
  highlight ImportantComment
        \ cterm=bold gui=bold ctermbg=none ctermfg=4 guifg=#3C93FA guibg=none
  highlight HackComment
        \ cterm=bold ctermbg=none ctermfg=45 guifg=#a86add guibg=none
  highlight NoCheckIn
        \ cterm=bold,underline ctermbg=none ctermfg=9 gui=bold,underline guifg=#FF2400 guibg=none
  highlight UnusedComment
        \ ctermbg=none ctermfg=11 guifg=#FDDA0D guibg=none

augroup END

autocmd FileType yaml setlocal ts=4 sts=4 sw=4 expandtab

set laststatus=2                " always display statusline
set statusline=%<%F\ %m\ %r\ %y\ 0x%B,%b%=%l:%c\ %P
set statusline+=\ %{\"[\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\"\ BOM\":\"\").\"]\ \"}

set backspace=indent,eol,start  " Backspace for dummies
set linespace=0                 " No extra spaces between rows
set showmatch                   " Show matching brackets/parenthesis
set incsearch                   " Find as you type search
set hlsearch                    " Highlight search terms
set winminheight=0              " Windows can be 0 line high
set ignorecase                  " Case insensitive search
set smartcase                   " Case sensitive when uc present
set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then
                                " longest common part, then all.
set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
set scrolljump=5                " Lines to scroll when cursor leaves screen
set scrolloff=3                 " Minimum lines to keep above and below cursor
set colorcolumn=81              " higlight column 81
set list!
set listchars=tab:·\ ,trail:.   " Highlight problematic whitespace
set fillchars+=vert:│           " separator
set fillchars+=stl:\ ,stlnc:\   "
set vb t_vb=                    " No more beeps
set lazyredraw
set noshowmode
set noerrorbells

"""""""""""""""""""""""""""""""""" FORMATTING """"""""""""""""""""""""""""""""""

set autoindent                  " Indent at the same level of the previous line
set expandtab                   " Tabs are spaces, not tabs
set shiftwidth=2                " Use indents of 2 spaces
set tabstop=2                   " An indentation every four columns
set softtabstop=2               " Let backspace delete indent
set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
set splitright                  " Puts new vsplit windows to the right of the current
set splitbelow                  " Puts new split windows to the bottom of the current

""""""""""""""""""""""""""""""""" KEY MAPPING """"""""""""""""""""""""""""""""""

autocmd InsertLeave  * normal mZ
nmap <leader>i `Z

nmap j gj
nmap k gk

" nvim terminal more like vim terminal
if has('nvim')
    tnoremap <C-w>n <C-\><C-n>
    tnoremap <C-w>h <C-\><C-N><C-w>h
    tnoremap <C-w>j <C-\><C-N><C-w>j
    tnoremap <C-w>k <C-\><C-N><C-w>k
    tnoremap <C-w>l <C-\><C-N><C-w>l

    nnoremap <space>g <cmd>lua require('sg.extensions.telescope').fuzzy_search_results()<CR>
endif

""""""""""""""""""""""""""""""""""" vim-go """""""""""""""""""""""""""""""""""""

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 0
let g:go_highlight_types = 0
let g:go_highlight_operators = 0
let g:go_highlight_build_constraints = 1
let g:go_fmt_command = "goimports"
let g:go_def_mapping_enabled = 1

let g:go_term_enabled = 1
let g:go_term_close_on_exit = 0
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'


"""""""""""""""""""""""""""""""""""" FZF """""""""""""""""""""""""""""""""""""""

let g:rooter_patterns = [
            \ '.git', 
            \ 'Makefile', 
            \ 'compile_commands.json',
            \ 'Cargo.toml',
            \ ]

if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif

if executable('fzf')
    let g:fzf_buffers_jump = 1
    let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.9 } }
endif


"""""""""""""""""""""""""""""""""""" lsp """""""""""""""""""""""""""""""""""""""

let g:completion_matching_strategy_list = ['exact', 'substring', 'fuzzy']
set completeopt=menuone,noinsert,noselect

""""""""""""""""""""""""""""""""""" custom """""""""""""""""""""""""""""""""""""

augroup autospell
  autocmd FileType markdown,vimwiki setlocal spelllang=ru,en spell
augroup END

noremap <silent> <leader>ss :setlocal spelllang=ru,en spell<CR>
noremap <silent> <leader>sn :setlocal nospell<CR>

if has('nvim')

lua << EOF
    local home_dir = os.getenv("HOME")
    package.path = home_dir .. "/dotfiles2.0/vim/lua/?.lua;" .. package.path
    require('custom')
EOF

endif


call s:LocalSource('term.vim')
